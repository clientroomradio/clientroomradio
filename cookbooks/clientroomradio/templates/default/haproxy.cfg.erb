## GENERATED BY CHEF, DONT EDIT DIRECTLY
global
  log  127.0.0.1  local0
  log  127.0.0.1  local1 notice
  user haproxy
  daemon
  maxconn 20000
  # lowering record size for faster time to first byte (1 less roundtrip)
  tune.ssl.maxrecord 1370

defaults
  log   global
  mode  http
  maxconn  1000
  option  httplog
  option  forwardfor header X-Real-IP
  option  dontlognull
  retries  0 # if we can't connect to backend, insta-fail, don't let haproxy retry.. ie, fail fast, since backends restarting takes a while anyway.
  option  http-server-close  # ignore server keepalive setting

  timeout server 40s # if nothing from backend server in 40s (we have idle timer <30s, so fine)
  timeout client 40s # boot clients at the same time as server gives up, if connection is borked
  timeout http-request 5s # slow-loris
  timeout connect 5s # making connections to backends
  timeout tunnel 60s # supercedes server/client timeouts after http UPGRADE to websocket (again, 30s idle msgs..)

  # Enable stats
  stats enable
  stats uri /hastats
  stats refresh 5s
  stats hide-version
  stats auth crr:crr


frontend public-http
    mode http
    bind *:80
    redirect scheme https

frontend public-https
    mode http
    # advertise http/1.1 over npn for tls false start: https://plus.google.com/+IlyaGrigorik/posts/Q5kgmKve54p
    bind *:443 ssl crt /etc/clientroomradio/crr.pem ciphers <%=@cipherstring%> npn http/1.1,http/1.0
    # Remove any client spoofed X-Real-IP
    reqidel ^X-Real-IP:.*
    # Proper httpds only accept lowercase "Upgrade: websocket" header values
    # as per the spec. some clients send WebSocket
    reqirep ^Upgrade:\ WebSocket    Upgrade:\ websocket
    # Some clients want Sec-WebSocket-Accept: in response, but some send sec-websocket-accept
    # These clients are buggy, since header names are not case sensitive (supposedly)
    rspirep ^Sec-WebSocket-Accept:(.*)  Sec-WebSocket-Accept:\1

    # Ensure www. prefix for main domain
#    redirect prefix https://www.irccloud.com code 301 if { hdr(host) -i irccloud.com }

    acl streaming path_beg /stream.mp3

    use_backend node-streamer if streaming
    default_backend node-frontend

backend node-streamer
    mode http
    server crr-streamer localhost:8080

backend node-frontend
    mode http
    server crr-frontend localhost:3000

